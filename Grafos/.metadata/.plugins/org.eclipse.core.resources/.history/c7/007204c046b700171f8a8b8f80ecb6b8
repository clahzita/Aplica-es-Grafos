package pagehopping;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

public class Main {
	
	
	public class Grafo{
		public static final int INFINITO = Integer.MAX_VALUE;
		private int[][] matrizDistancia;
		

		public Grafo(int linhas, int colunas) {
			this.matrizDistancia = new int[linhas][colunas];
			//inicioaliza a matriz com 0 nos encontros do proprios vertices e 
			// infinito nos demais
			for (int i = 1; i < matrizDistancia.length; i++) {
				for (int j = 1; j < matrizDistancia.length; j++) {
					if(i==j){
						matrizDistancia[i][j] = 0;
					}
					else{
						matrizDistancia[i][j]=INFINITO;
					}
				}
			}
		}
						
		public void adicionarAresta(int origemId, int destinoId, int peso) {
			matrizDistancia[origemId][destinoId] = peso;
			
		}
		
		public void removerAresta(int origemId, int destinoId) {
			matrizDistancia[origemId][destinoId] = INFINITO;
			
		}

		
		public void imprimirGrafo() {
			for (int i = 1; i < matrizDistancia.length; i++) {
				for (int j = 1; j < matrizDistancia.length; j++) {
					if (matrizDistancia[i][j]==INFINITO)
	                    System.out.print("INF ");
	                else
	                  System.out.print(matrizDistancia[i][j]+" ");
						
				}
				System.out.println();
			}
				
		}		
		//Media Distancia Caminhos Minimos
		public double calcularMediaDistanciasCaminhoMinimos(int[][] distGrafo, int tam){
			int distanciasCaminhos =0;
			int parespossiveis = 0;
			int[][] dist = new int[tam][tam];
			for (int i = 1; i < tam; i++){
	            for (int j = 1; j < tam; j++){
	            	if(i!=j && distGrafo[i][j] < INFINITO)
	            	distanciasCaminhos += distGrafo[i][j];
	            }
			}
			
			
			
			return;
		}
		
		//Floyd-Warshall
		public int[][] calcularCaminhosMinimosTodosPares(){
			//n = W.linhas
			int n = matrizDistancia.length;
		
			//D(0)=W
			int[][] dist = new int[n][n];
			for (int i = 1; i < n; i++){
	            for (int j = 1; j < n; j++){
	                dist[i][j] = matrizDistancia[i][j];
	            }
			}
			
			for (int k = 1; k < n; k++) {				
				for(int i = 1; i < n; i++){
					for (int j = 1; j < n; j++) {
						dist[i][j] = Integer.min(dist[i][j], dist[i][k] + dist[k][j]);
					}
				}					
			}
			
			return dist;
			
			
		}

	}

	private static final int MAX = 101;
	
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in); 
		Main obj = new Main();
		
		Grafo grafo = null;
		int[][] matriz;
		boolean primeiroTeste = false;
		boolean fimLinhaTeste = false;
		int origem, destino;
		int paresVestices, tamanhosCaminhos;
		
		
		while(!primeiroTeste){
			primeiroTeste = true;
			
			while(!fimLinhaTeste){
				grafo = obj.new Grafo(MAX,MAX);
				origem = scanner.nextInt();
				destino = scanner.nextInt();
				
				if(origem == 0 && destino == 0){
					if(primeiroTeste){
						return;
					}else{
						fimLinhaTeste=true;
					}
										
				}else{
					grafo.adicionarAresta(origem, destino, 1);
					primeiroTeste=false;
				}				
			}
			fimLinhaTeste = false;
			matriz = grafo.calcularCaminhosMinimosTodosPares();
			
			
			
		}
		
		
		

	}

}

