/**
 * Grafo, 18/10/2017
 * Todos os direitos reservados para Clarissa Alves Soares. 
 */

package br.imd.grafos.tad;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import GrafoExemplo.Aresta;
import GrafoExemplo.Vertice;

/**
 * Representação de um grafo usando lista de adjacencias
 * @version 1.0
 * @author clarissa
 *
 */
public class Grafo {
	public static final int BRANCO = 0;
	public static final int CINZA = 1;
	public static final int PRETO = 2;
	
	List<Vertice> vertices;
	boolean dirigido;
	
	public Grafo(boolean dirigido){
		this.dirigido = dirigido;
		this.vertices = new ArrayList<Vertice>();
	}
	
	public void adicionarVertice(Vertice novo) {
		vertices.add(novo);
	}
	
	public void removerVertice(Vertice vertice) {
		//Remove do grafo
		vertices.remove(vertice);
		//Remove o vertice da lista de adjacencias
		for (Vertice v : vertices) {
			if(v.temAdjacente(vertice)){
				v.removerAdjacente(vertice);
			}			
		}
		
		
	}
	
	public void adicionarAresta(Vertice origem, Vertice destino){
		if(dirigido){
			destino.adicionarAdjacente(origem);
		}
		origem.adicionarAdjacente(destino);		
	}
	
	public void removerAresta(Vertice origem, Vertice destino){
		if(dirigido){
			destino.removerAdjacente(origem);
		}
		
		origem.removerAdjacente(destino);		
	}
	
	public void imprimirGrafo(){
		for (Vertice vertice : vertices) {			
			System.out.print(vertice.getId()+" -> ");
			for (Vertice adjacente : vertice.getAdj()) {
				System.out.print(adjacente.getId()+", ");				
			}
			System.out.println();
		}
	}
	
	private void inicializaVertices(){
		for (Vertice vertice : vertices) {
			vertice.setCor(BRANCO);
			vertice.setGrau(Integer.MAX_VALUE);
			vertice.setPai(null);			
		}
		
	}
	
	public boolean buscaEmLargura(Vertice fonte){

		//Pre-processamento
		inicializaVertices();
		
		if(fonte == null){
			return false;
		}
		fonte.setCor(CINZA);
		fonte.setGrau(0);
		Queue<Vertice> fila = new LinkedList<Vertice>();
		fila.add(fonte);
		Vertice u;
		
		//Processamento
		while (fila.isEmpty()) {
			u = fila.remove();
			List<Vertice> adj = u.getAdj();
			for (int i = 0; i < adj.size(); i++) {
				Vertice v = adj.get(i);
				if (v.getCor()==BRANCO) {
					v.setCor(CINZA);
					v.setGrau(u.getGrau()+1);
					v.setPai(u);
					fila.add(v);
				}
			}
			u.setCor(PRETO);
			
		}
		
		return true;
	}
}
